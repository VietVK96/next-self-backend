<html>
  <head>
    <style type="text/css" rel="stylesheet">
      html, body {
        height: 100%;
      }

      html, html * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      .page {
        width: 297mm;
        height: 200mm;
        position: relative;
                /*height: 100%;*/
/*                filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=3);
                -webkit-transform: rotate(-90deg);
                   -moz-transform:rotate(-90deg);
                        transform: rotate(-90deg);*/
      }

      table {
        width: 100%;
        /*height: 100%;*/
        table-layout: fixed;
        border-collapse: collapse;
        border: solid 1px #000;
      }

      table td {
        border: solid 1px #000;
      }

      table th {
        height: 30px;
      }

      table th.time,
        table td.time {
        width: 50px;
                text-align: center;
            }

            .appointment {
                position: absolute;
                top: 0;
                width: 100%;
                overflow: hidden;
            }

            .appointment.pbw {
                background-color: #FFFFFF !important;
                border: solid 1px #000 !important;
                color: #000 !important;
            }

            .resources {
                position: absolute;
                top: 0;
                left: 50px;
                right: 0;
                bottom: 0;
            }

            .resource {
                position: relative;
            }

        </style>

    <script>
        var lineNumber = {{lineNumber}};
        var frequency = {{preference.frequency}};
        var amStart = new Date(`1970-01-01T{{preference.hmd}}`);
        var pmEnd = new Date(`1970-01-01T{{preference.haf}}`);
        var pbw = {{pbw}};

      
  
        function adjustOverlapping(column) {
          const width = column.clientWidth;
          const groups = groupOverlappingElements(column);
            groups.forEach(group => {
            group.forEach((currentGroup, index) => {
              let currentGroupWidth = Math.floor(width / group.length);
              const currentGroupLeft = index * currentGroupWidth;
              if (index == (group.length - 1)) {
                currentGroupWidth += Math.max(0, width - (group.length * currentGroupWidth));
              }
              currentGroupWidth = Math.min(width, currentGroupWidth);
              currentGroup.forEach(appointment => {
                appointment.style.width = `${currentGroupWidth}px`;
                appointment.style.left = `${currentGroupLeft}px`;
                  });
                });
                });{{this.startDatetime}}
            }

         function groupOverlappingElements(column) {

                const groups = [];
                const currentGroups = [];
                const appointments = [].slice.call(column.querySelectorAll('.appointment'));
                const overlaps = appointments.sort(function(a, b) {
                    return a.dataset.startDatetime - b.dataset.startDatetime;
                });

                let endTime = new Date(0, 0, 0).getTime();
                overlaps.forEach(currentAppointment => {
                    const start = currentAppointment.dataset.startDatetime;
                    const end = currentAppointment.dataset.endDatetime;
                    if (currentGroups.length > 0 && endTime <= start) {
                        groups.push(currentGroups);
                        currentGroups.length = 0;
                    }
                    for (var i = 0, len = currentGroups.length; i < len; i++) {
                        if (currentGroups[i].length > 0) {
                            var appointment = currentGroups[i][currentGroups[i].length - 1];
                            var eventEnd = appointment.dataset.endDatetime;
                            if (eventEnd <= start) {
                                currentGroups[i].push(currentAppointment);
                                if (endTime < end)
                                    endTime = end;
                                return;
                            }
                        }
                    }
                    currentGroups.push([currentAppointment]);
                    if (endTime < end) {
                        endTime = end;
                    }
                });
                if (currentGroups.length > 0) {
                    groups.push(currentGroups);
                }
                return groups;
            }

        function domContentLoaded() {
           var appointments = [];

        document.querySelectorAll('.allData').forEach((dataDiv)=> {
          let appointment = {
            id: dataDiv.querySelector('.ids').textContent,
            startDatetime: dataDiv.querySelector('.startDatetime').textContent,
            endDatetime: dataDiv.querySelector('.endDatetime').textContent,
            title: dataDiv.querySelector('.title').textContent,
            observation: dataDiv.querySelector('.observation').textContent,
            state: dataDiv.querySelector('.state').textContent,
            lateness: dataDiv.querySelector('.lateness').textContent,
            startTime: dataDiv.querySelector('.startTime').textContent,
            endTime: dataDiv.querySelector('.endTime').textContent,
            creationDate: dataDiv.querySelector('.creationDate').textContent,
            doctorId: dataDiv.querySelector('.doctorId').textContent,
            doctorShortName: dataDiv.querySelector('.doctorShortName').textContent,
            doctorLastName: dataDiv.querySelector('.doctorLastName').textContent,
            doctorFirstName: dataDiv.querySelector('.doctorFirstName').textContent,
            resourceId: dataDiv.querySelector('.resourceId').textContent,
            resourceName: dataDiv.querySelector('.resourceName').textContent,
            patientId: dataDiv.querySelector('.patientId').textContent,
            number: dataDiv.querySelector('.number').textContent,
            lastName: dataDiv.querySelector('.lastName').textContent,
            firstName: dataDiv.querySelector('.firstName').textContent,
            birthDate: dataDiv.querySelector('.birthDate').textContent,
            email: dataDiv.querySelector('.email').textContent,
            civilityTitle: dataDiv.querySelector('.civilityTitle').textContent,
            homePhoneNumber: dataDiv.querySelector('.homePhoneNumber').textContent,
            mobilePhoneNumber: dataDiv.querySelector('.mobilePhoneNumber').textContent,
            smsPhoneNumber: dataDiv.querySelector('.smsPhoneNumber').textContent,
            age: dataDiv.querySelector('.age').textContent,
            className: dataDiv.querySelector('.className').textContent,
            resources: {
              id: dataDiv.querySelector('.resourceId').textContent,
              name: dataDiv.querySelector('.resourceName').textContent,
            },
            color: {
              background: dataDiv.querySelector('.colorback').textContent,
              foreground: dataDiv.querySelector('.colorfore').textContent,
            },
           
          }
          appointments.push(appointment);
        })
          const heightLine = document.querySelector('td.content').clientHeight + 1 // bordure;
                const amStartToMinutes = amStart.getMinutes() + amStart.getHours() * 60;
                
                const pmEndToMinutes = pmEnd.getMinutes() + pmEnd.getHours() * 60;
                let height = 0;
                for (let row of document.querySelectorAll('tr.row')) {
                    height += row.offsetHeight;
                    
                }
                // Pour chaque rendez-vous
                appointments.forEach(appointment => {
                    
                    const start = new Date(appointment.startDatetime);
                    
                    const startToMinutes = start.getMinutes() + start.getHours() * 60;
                    const startToString = `${start.getFullYear()}-${('' + (start.getMonth() + 1)).padStart(2, 0)}-${('' + start.getDate()).padStart(2, 0)}`;
                    const end = new Date(appointment.endDatetime);
                    const endToMinutes = end.getMinutes() + end.getHours() * 60;
                    const resourceId = appointment.resourceId;
                    
                    // Recherche de l'élément parent
                    const parent = document.querySelector(`td[data-date="${startToString}"][data-resource="${resourceId}"]`);
                    if (parent !== null && endToMinutes > amStartToMinutes && startToMinutes < pmEndToMinutes) {
                        const el = document.createElement('div');
                        el.dataset.start = start.getTime();
                        el.dataset.end = end.getTime();
                        el.classList.add('appointment');
                        el.style.top = ((Math.max(amStartToMinutes, startToMinutes) - amStartToMinutes) / frequency) * heightLine + 'px';
                        el.style.height = (((Math.min(pmEndToMinutes, endToMinutes) - Math.max(amStartToMinutes, startToMinutes)) / frequency) * heightLine) - 1 + 'px';
                        el.style.backgroundColor = appointment.color.background;
                        el.style.color = appointment.color.foreground;
                        el.innerHTML = appointment.title;
                        if (pbw) {
                            el.classList.add('pbw');
                        }
                        parent.appendChild(el);
                    }
                });
                // On repositionne tous les rendez-vous qui se chevauchent
                for (let column of document.querySelectorAll('td[data-date]')) {
                    adjustOverlapping(column);
                    column.style.height = `${height}px`;
                }
        }
        document.addEventListener('DOMContentLoaded', domContentLoaded);
    </script>


   

    

  </head>
  <body>
    <div id="test"></div>
    <div class='page'>
      <table class='timeline'>
        <tbody>
          <tr>
            <th class="time"></th>
            <th></th>
          </tr>
          <tr>
            <th class='time'></th>
            <th></th>
          </tr>
          {{#each arrTimes}}
          <tr class='row'>
            {{#if (eq (getMinutes this) 0)}}
            <td
              class='time'
              rowspan={{divide 60 ../preference.frequency}}
            >{{this}}</td>
            {{/if }}
            {{#if (eq (add (getMinutes ../preference.hmd) ../preference.frequency) 60)}}
            <td class='content' style="height: {{../lineHeight}}px;"></td>
            {{else}}
            <td class='content' style="height: {{../lineHeight}}px; border-color: #999999;"></td>
            {{/if}}
          </tr>
          {{/each}}
        </tbody>
      </table>

      <div class='resources'>
        <table>
          <tbody>
            <tr>
              {{#each arrDays}}
              <th colspan={{../ids}}>{{this.label}}</th>
              {{/each}}
            </tr>
            <tr>
              {{#each arrDays}}
              {{#each ../arrResources}}
              <th style='overflow: hidden;white-space: nowrap;text-overflow: ellipsis;' >
              {{this.name}}
              </th>
              {{/each}}
              {{/each}}
            </tr>
            <tr>
              {{#each arrDays}}
              {{#each ../arrResources}}
              <td
                class='resource'
                data-resource={{this.id}}
                data-date={{../this.value}}
              ></td>
              {{/each}}
              {{/each}}
            </tr>
          </tbody>
        </table>
      </div>
    </div>
    {{#each events}}
    <div style="display: none;" class="allData">
      <div class="ids">{{this.id}}</div>
      <div class="startDatetime">{{this.startDatetime}}</div>
      <div class="endDatetime">{{this.endDatetime}}</div>
      <div class="title">{{this.title}}</div>
      <div class="observation">{{this.observation}}</div>
      <div class="state">{{this.state}}</div>
      <div class="lateness">{{this.lateness}}</div>
      <div class="startTime">{{this.startTime}}</div>
      <div class="endTime">{{this.endTime}}</div>
      <div class="creationDate">{{this.creationDate}}</div>
      <div class="doctorId">{{this.doctorId}}</div>
      <div class="doctorShortname">{{this.doctorShortname}}</div>
      <div class="doctorLastname">{{this.doctorLastname}}</div>
      <div class="doctorFirstname">{{this.doctorFirstname}}</div>
      <div class="resourceId">{{this.resourceId}}</div>
      <div class="resourceName">{{this.resourceName}}</div>
      <div class="patientId">{{this.patientId}}</div>
      <div class="number">{{this.number}}</div>
      <div class="lastName">{{this.lastName}}</div>
      <div class="firstName">{{this.firstName}}</div>
      <div class="birthDate">{{this.birthDate}}</div>
      <div class="email">{{this.email}}</div>
      <div class="civilityTitle">{{this.civilityTitle}}</div>
      <div class="homePhoneNumber">{{this.homePhoneNumber}}</div>
      <div class="mobilePhoneNumber">{{this.mobilePhoneNumber}}</div>
      <div class="smsPhoneNumber">{{this.smsPhoneNumber}}</div>
      <div class="age">{{this.age}}</div>
      <div class="className">{{this.className}}</div>
      <div class="colorback">{{this.color.background}}</div>
      <div class="colorfore">{{this.color.foreground}}</div>
    </div>
    {{/each}} 
  </body>
</html>